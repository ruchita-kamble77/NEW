# Step 1: Import Required Libraries
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import adfuller
from sklearn.metrics import mean_squared_error
import numpy as np

# Step 2: Load Time Series Dataset
df = pd.read_csv('monthly_sales.csv')
df.columns = ['Data', 'Sales']  # Rename for consistency if needed
df['Month'] = pd.to_datetime(df['Month'])
df.set_index('Month', inplace=True)
print(df.head())

   
# Step 3: Visualize the Time Series
df.plot(figsize=(10, 6), title='Monthly Airline Passengers')
plt.xlabel("Data")
plt.ylabel("Sales")
plt.show()

# Step 4: Check Stationarity
result = adfuller(df['Sales'])
print(f'ADF Statistic: {result[0]}')
print(f'p-value: {result[1]}')


# Step 5: Differencing if not stationary
if result[1] > 0.05:
    df_diff = df['Sales'].diff().dropna()
    df_diff.plot(figsize=(10, 6), title='Differenced Series')
    plt.show()
    data_to_model = df_diff
    d = 1
else:
    data_to_model = df['Sales']
    d = 0


# Step 6: ACF and PACF plots to decide p and q
plot_acf(data_to_model, lags=20)
plot_pacf(data_to_model, lags=20)
plt.show()


# Step 7: Fit ARIMA Model (Example: p=2, d=d, q=2)
model = ARIMA(df['Sales'], order=(2, d, 2))
model_fit = model.fit()
print(model_fit.summary())


# Step 8: Forecast Future Values
forecast = model_fit.forecast(steps=12)
print("Forecast:\n", forecast)

# Plot original and forecast
plt.figure(figsize=(10, 6))
plt.plot(df.index, df['Sales'], label='Original')
plt.plot(pd.date_range(df.index[-1], periods=13, freq='MS')[1:], forecast, label='Forecast', color='red')
plt.title('ARIMA Forecast')
plt.xlabel('Date')
plt.ylabel('Passengers')
plt.legend()
plt.show()

# Step 9: Evaluate Model Performance (Train/Test Split)
train = df['Passengers'][:-12]
test = df['Passengers'][-12:]

model = ARIMA(train, order=(2, d, 2))
model_fit = model.fit()
pred = model_fit.forecast(steps=12)

rmse = np.sqrt(mean_squared_error(test, pred))
print(f'RMSE: {rmse:.2f}')â†’RMSE: 55.22
