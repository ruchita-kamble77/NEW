from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Load Iris dataset
iris = load_iris()
X, y = iris.data, iris.target
feature_names = iris.feature_names
target_names = iris.target_names

# Split data (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize models
dt_model = DecisionTreeClassifier(random_state=42)
svm_model = SVC(random_state=42)

# Train models
dt_model.fit(X_train_scaled, y_train)
svm_model.fit(X_train_scaled, y_train)

# Predict
dt_pred = dt_model.predict(X_test_scaled)
svm_pred = svm_model.predict(X_test_scaled)

# Accuracy scores
dt_acc = accuracy_score(y_test, dt_pred)
svm_acc = accuracy_score(y_test, svm_pred)

print(f"Decision Tree Accuracy: {dt_acc:.4f}")
print(f"SVM Accuracy: {svm_acc:.4f}\n")

# Classification reports
print("Decision Tree Classification Report:")
print(classification_report(y_test, dt_pred, target_names=target_names))

print("SVM Classification Report:")
print(classification_report(y_test, svm_pred, target_names=target_names))

# Plot confusion matrices side-by-side
fig, axes = plt.subplots(1, 2, figsize=(12, 5))

sns.heatmap(confusion_matrix(y_test, dt_pred), annot=True, fmt='d', cmap='Blues', ax=axes[0],
            xticklabels=target_names, yticklabels=target_names)
axes[0].set_title('Decision Tree Confusion Matrix')
axes[0].set_xlabel('Predicted')
axes[0].set_ylabel('Actual')

sns.heatmap(confusion_matrix(y_test, svm_pred), annot=True, fmt='d', cmap='Greens', ax=axes[1],
            xticklabels=target_names, yticklabels=target_names)
axes[1].set_title('SVM Confusion Matrix')
axes[1].set_xlabel('Predicted')
axes[1].set_ylabel('Actual')

plt.tight_layout()
plt.show()
