import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Load dataset
df = pd.read_csv("airbnb_listings.csv")

# Drop rows with missing values (or handle them separately)
df = df.dropna(subset=['price'])

# Choose feature columns (example: choose meaningful subset)
features = ['neighbourhood_group', 'room_type', 'minimum_nights', 'number_of_reviews']
target = 'price'

# Encode categorical features
for col in ['neighbourhood_group', 'room_type']:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

# Define X and y
X = df[features]
y = df[target]

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"âœ… RMSE: {rmse:.2f}")
print(f"âœ… RÂ² Score: {r2:.4f}")
--------------------------------------------------------------------------

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv("traffic_violations.csv")

# Convert timestamp column to datetime (adjust column name as needed)
df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')

# Drop NaT values
df = df.dropna(subset=['timestamp'])

# Extract hour
df['hour'] = df['timestamp'].dt.hour

# Group by hour
violations_by_hour = df.groupby('hour').size().reset_index(name='violations')

# Plot
plt.figure(figsize=(10, 6))
sns.barplot(x='hour', y='violations', data=violations_by_hour, palette='coolwarm')
plt.title("ðŸš¦ Traffic Violations by Hour of Day")
plt.xlabel("Hour")
plt.ylabel("Number of Violations")
plt.xticks(range(0, 24))
plt.tight_layout()
plt.show()
