import pandas as pd
import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix

iris=load_iris()##load data
X= iris.data
y=iris.target

X_train, X_test, y_train, y_test =train_test_split(X, y, test_size=0.3, random_state=42)

#Step 4: Initialize and Train Models
# Initialize models
dt_model = DecisionTreeClassifier(random_state=42)
nb_model = GaussianNB()
svm_model = SVC(random_state=42)
knn_model = KNeighborsClassifier()

3Train models
dt_model.fit(X_train, y_train)
nb_model.fit(X_train, y_train)
svm_model.fit(X_train, y_train)
knn_model.fit(X_train, y_train)


#Step 5: Make Predictions
dt_pred = dt_model.predict(X_test)
nb_pred = nb_model.predict(X_test)
svm_pred = svm_model.predict(X_test)
knn_pred = knn_model.predict(X_test)

#Step 6: Evaluate Models
#Use classification_report to get precision, recall, F1-score:

print("Decision Tree:\n", classification_report(y_test, dt_pred))
print("Naive Bayes:\n", classification_report(y_test, nb_pred))
print("SVM:\n", classification_report(y_test, svm_pred))
print("KNN:\n", classification_report(y_test, knn_pred))
print("Decision Tree Confusion Matrix:\n", confusion_matrix(y_test, dt_pred))
print("Naive Bayes Confusion Matrix:\n", confusion_matrix(y_test, nb_pred))
print("SVM Confusion Matrix:\n", confusion_matrix(y_test, svm_pred))
print("KNN Confusion Matrix:\n", confusion_matrix(y_test, knn_pred))
